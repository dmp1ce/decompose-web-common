# Provides common processes for web projects

DECOMPOSE_WEB_PROCESSES=( 'env' 'start_nginx_proxy' 'stop_nginx_proxy'
  'restart_nginx_proxy' 'import_tls_certificate' )

_decompose-process-env() {
  echo "$PROJECT_ENVIRONMENT"
  echo "PRODUCTION: $PRODUCTION"
  echo "DEVELOPMENT: $DEVELOPMENT"
}
_decompose-process-env_help() {
  echo "  Show environment setting"
}

_decompose-process-start_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ -n "$nginx_proxy_id" ]; then
    echo "nginx-proxy ($nginx_proxy_id) is already running"
    echo "Try stoping nginx-proxy first with 'decompose stop_nginx_proxy'"
    return 0
  fi
  docker run --label "nginx_proxy" -d -p 80:80 -p 443:443 --restart="always" -e DEFAULT_HOST="$PROJECT_NGINX_DEFAULT_HOST" -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
}
_decompose-process-start_nginx_proxy_help() {
  echo "  Start nginx-proxy which can host multiple sites"
}

_decompose-process-stop_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ -n "$nginx_proxy_id" ]; then
    echo "Closing currently running proxy: $nginx_proxy_id"
    docker stop "$nginx_proxy_id"
  fi
}
_decompose-process-stop_nginx_proxy_help() {
  echo "  Stop nginx-proxy"
}

_decompose-process-restart_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ ! -n "$nginx_proxy_id" ]; then
    echo "nginx-proxy is not running"
    echo -n "Starting nginx-proxy... "
    _decompose-process-start_nginx_proxy
    return 0
  else
    echo -n "Restarting nginx_proxy ... "
    local restart_output=$(docker restart $nginx_proxy_id)
  fi
  echo "done"
}

_decompose-process-restart_nginx_proxy_help() {
  echo "  Restart nginx-proxy"
}

_decompose-process-import_tls_certificate() {
  local key_file=$1
  local certificate_file=$2
  if [ ! -e "$key_file" ]; then
    echo "File '$key_file' does not exist"
    exit 1
  fi
  if [ ! -e "$certificate_file" ]; then
    echo "File '$certificate_file' does not exist"
    exit 1
  fi

  local cid=$(_decompose-process_nginx_proxy_id)
  if [ ! -n "$cid" ]; then
    echo "nginx-proxy is not running"
    echo "First start nginx-proxy with 'deocmpose start_nginx_proxy'"
    return 1
  fi

  echo "NOTICE: Make sure the key and certificate files use VIRTUAL_HOST names."
  echo "Example: 'foo.bar.com.crt' and 'foo.bar.com.key'"

  docker cp "$key_file" $cid:/etc/nginx/certs
  docker cp "$certificate_file" $cid:/etc/nginx/certs
  echo "done"
}
_decompose-process-import_tls_certificate_help() {
  echo "  Import TLS certificate and key to nginx-proxy"
}

# Echo the nginx-proxy docker id
_decompose-process_nginx_proxy_id() {
  echo $(docker ps --filter "label=nginx_proxy" --format "{{.ID}}")
}

# vim:syntax=sh
