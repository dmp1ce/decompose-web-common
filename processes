# Provides common processes for web projects

DECOMPOSE_WEB_PROCESSES=( 'env' 'start_nginx_proxy' 'stop_nginx_proxy'
  'restart_nginx_proxy' 'backup_config' )

_decompose-process-env() {
  echo "$PROJECT_ENVIRONMENT"
  echo "PRODUCTION: $PRODUCTION"
  echo "DEVELOPMENT: $DEVELOPMENT"
}
_decompose-process-env_help() {
  echo "  Show environment setting"
}


_decompose-process-start_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ -n "$nginx_proxy_id" ]; then
    echo "nginx-proxy ($nginx_proxy_id) is already running"
    echo "Try stoping nginx-proxy first with 'decompose stop_nginx_proxy'"
    return 0
  fi
  docker run --label "nginx_proxy" -d -p 80:80 -p 443:443 --restart="always" -e DEFAULT_HOST="$PROJECT_NGINX_DEFAULT_HOST" -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
}
_decompose-process-start_nginx_proxy_help() {
  echo "  Start nginx-proxy which can host multiple sites"
}

_decompose-process-stop_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ -n "$nginx_proxy_id" ]; then
    echo "Closing currently running proxy: $nginx_proxy_id"
    docker stop "$nginx_proxy_id"
  fi
}
_decompose-process-stop_nginx_proxy_help() {
  echo "  Stop nginx-proxy"
}

_decompose-process-restart_nginx_proxy() {
  local nginx_proxy_id=$(_decompose-process_nginx_proxy_id)
  if [ ! -n "$nginx_proxy_id" ]; then
    echo "nginx-proxy ($nginx_proxy_id) is not running"
    echo -n "Starting nginx-proxy... "
    _decompose-process-start_nginx_proxy
    return 0
  else
    echo -n "Restarting nginx_proxy ... "
    local restart_output=$(docker restart $nginx_proxy_id)
  fi
  echo "done"
}

_decompose-process-restart_nginx_proxy_help() {
  echo "  Restart nginx-proxy"
}

# Echo the nginx-proxy docker id
_decompose-process_nginx_proxy_id() {
  echo $(docker ps --filter "label=nginx_proxy" --format "{{.ID}}")
}

_decompose-process-backup_config() {
  echo "Backing up config..."
  local project_root=$(_decompose-project-root)

  local string_time=$(date +%s)
  local config_name=$PROJECT_NGINX_VIRTUAL_HOST_PROD
  local asc_files=$(cd "$project_root";\
    echo ./containers/backup/.duply/site_data/*.asc)

  mkdir -p "$project_root"/backup_config
  tar -C "$project_root" \
    -cvzf "$project_root"/backup_config/$config_name-config-$string_time".tar.gz" \
    --exclude="*.git" \
    ./.decompose \
    ./containers/backup/.ssh \
    $asc_files
}
_decompose-process-backup_config_help() {
  local project_root=$(_decompose-project-root)
  echo "  TODO: Creates backup file of the current configuration for safe keeping"
  echo "  File is copied to '$project_root/backup_config' directory"
}

# vim:syntax=sh
