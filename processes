# Provides common processes for web projects

DECOMPOSE_WEB_PROCESSES=( 'env' 'start_nginx_proxy' 'stop_nginx_proxy'
  'restart_nginx_proxy' 'nginx_proxy_status' 'nginx_proxy_docker_compose'
  'start-reverse-proxy'
  'update-production-server-to-latest' 'increment-tag' 'ssh_production'
  'generate_nginx_proxy_configs' )


_decompose-process-env() {
  echo "$PROJECT_ENVIRONMENT"
  echo "PRODUCTION: $PRODUCTION"
  echo "DEVELOPMENT: $DEVELOPMENT"
  echo ""
  echo "Virtual host: $PROJECT_NGINX_VIRTUAL_HOST"
  echo "Virtual host alts: $PROJECT_NGINX_VIRTUAL_HOST_ALTS"
  echo "nginx-proxy virtual hosts string:"
  echo "  $PROJECT_NGINX_PROXY_VIRTUAL_HOSTS"
}
_decompose-process-env_help() {
  echo "  Show environment setting"
}

_decompose-process-ssh_production() {
  ssh $PROJECT_PRODUCTION_SERVER_USER@$PROJECT_PRODUCTION_SERVER_IP
}
_decompose-process-ssh_production_help() {
  echo "  SSH into production"
}

_decompose-process-nginx_proxy_docker_compose(){
  if [ -z "$1" ]; then
    exit 1
  fi

  local params="$@"
  local nginx_proxy_dir="$(_decompose-project-root)/containers/nginx_proxy"
  docker-compose -f "${nginx_proxy_dir}/docker-compose-web.yml" ${params}
}
_decompose-process-nginx_proxy_docker_compose_help() {
  echo "  Run docker-compose for nginx_proxy."
  echo "  Example: 'decompose nginx_proxy_docker_compose ps -q"
}

_decompose-process-nginx_proxy_status() {
  _decompose-process-nginx_proxy_docker_compose ps
}
_decompose-process-nginx_proxy_status_help() {
  echo "  Status of the nginx_proxy (docker-compose ps)"
}

_decompose-process-start_nginx_proxy() {
  _decompose-process-nginx_proxy_docker_compose up -d
}
_decompose-process-start_nginx_proxy_help() {
  echo "  Start nginx-proxy which can host multiple sites"
}

_decompose-process-restart_nginx_proxy() {
  _decompose-process-nginx_proxy_docker_compose restart
}
_decompose-process-restart_nginx_proxy_help() {
  echo "  Restart nginx-proxy"
}

_decompose-process-stop_nginx_proxy() {
  _decompose-process-nginx_proxy_docker_compose stop
}
_decompose-process-stop_nginx_proxy_help() {
  echo "  Stop nginx-proxy"
}

_decompose-process-start-reverse-proxy() {
  echo "Setting up reverse proxy at:"
  echo "http://$PROJECT_REVERSE_PROXY_IP:$PROJECT_REVERSE_PROXY_PORT/"
  ssh -R $PROJECT_REVERSE_PROXY_PORT:$PROJECT_WEBSITE_TO_EXPOSE_IP:$PROJECT_WEBSITE_TO_EXPOSE_PORT $PROJECT_REVERSE_PROXY_USER@$PROJECT_REVERSE_PROXY_IP
}
_decompose-process-start-reverse-proxy_help() {
  echo "  Start a reverse proxy for testing IPNs and exposing local environment"
}

_decompose-process-increment-tag() {
  # Verify that there are no version tags on at HEAD
  # so we don't create more tags than we need
  local head_version_tag=$(__decompose-process-latest-version-tag)

  if [ $head_version_tag ]; then
    echo "The version '$head_version_tag' already exists for HEAD"
    return 1
  fi

  # Increment tag - http://stackoverflow.com/a/8653732/350221
  local newtag=$(git describe --abbrev=0 --tags --match=$PROJECT_VERSION_TAG_MATCH $PROJECT_VERSION_TAG_BRANCH | awk -F. -v OFS=. 'NF>1{$NF++; print}')

  git tag "$newtag"
}
_decompose-process-increment-tag_help() {
  echo "  Increments the last tag and creates a new tag in git"
}

_decompose-process-update-production-server-to-latest() {
  # Test that user can update production git repository successfully
  echo "Testing user access to server:"
  echo "$PROJECT_PRODUCTION_SERVER_USER@$PROJECT_PRODUCTION_SERVER_IP:$PROJECT_PRODUCTION_SERVER_BASE_PATH"
  __decompose-process-update-production-repo || local fetch_failed=1
  if [ $fetch_failed ]; then
    echo "Access test failed!"
    echo "Check your SSH access to the production server and source control."
    exit 1
  else
    echo "Access test passed."
  fi

  # Increment the last tag
  echo "Incrementing version tag..."
  _decompose-process-increment-tag

  # Push production to source control server
  echo "Pushing local changes to source control server..."
  git push && git push --tags

  # Run ssh command to update server
  echo "Rebuilding production environment..."
  local latest_version_tag=$(__decompose-process-latest-version-tag)
  __decompose-process-update-production-repo $latest_version_tag
  __decompose-process-ssh-command "decompose build && decompose up"

  echo "Website updated complete."

  # Backup current configuration.
  __decompose-process-ssh-command "decompose backup_config"

  # Remove old Docker images
  if [ "$(type -t _decompose-process-remove-dangling-docker-images)" == "function" ]; then
    __decompose-process-ssh-command "decompose remove-dangling-docker-images"
  fi

  echo "Done!"
}
_decompose-process-update-production-server-to-latest_help() {
  echo "  Update production to the latest code with the following steps:"
  echo "  -------------------------------------------------------------"
  echo "  1. Test connection to server"
  echo "  2. Create new tag, incremented from the last tag"
  echo "  3. Push latest code and tags"
  echo "  4. Update code on production site"
  echo "  5. Rebuild/recreate production containers"
  echo "  6. Backup decompose configuration using 'backup_config' process"
  echo "  7. Remove old Docker images using 'remove-dangling-docker-images' process"
}

_decompose-process-generate_nginx_proxy_configs() {
  echo "Generating nginx-proxy configs..."

  local nginx_proxy_dir="$(_decompose-project-root)/containers/nginx_proxy/"

  test -f "$nginx_proxy_dir/proxy_virtual_host.conf" && \
  cp "$nginx_proxy_dir/proxy_virtual_host.conf" \
  "$nginx_proxy_dir/vhost.d/$PROJECT_NGINX_VIRTUAL_HOST"

  test -f "$nginx_proxy_dir/proxy_virtual_host.key" && \
  cp "$nginx_proxy_dir/proxy_virtual_host.key" \
    "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".key"

  test -f "$nginx_proxy_dir/proxy_virtual_host.crt" && \
  cp "$nginx_proxy_dir/proxy_virtual_host.crt" \
  "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".crt"

  test -f "$nginx_proxy_dir/proxy_virtual_host.dhparam.pem" && \
  cp "$nginx_proxy_dir/proxy_virtual_host.dhparam.pem" \
  "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".dhparam.pem"

  for vhost_alt in $PROJECT_NGINX_VIRTUAL_HOST_ALTS; do
    test -f "$nginx_proxy_dir/vhost.d/$PROJECT_NGINX_VIRTUAL_HOST" && \
    ln -sf "$PROJECT_NGINX_VIRTUAL_HOST" "$nginx_proxy_dir/vhost.d/$vhost_alt"

    test -f "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".key" && \
    ln -sf "$PROJECT_NGINX_VIRTUAL_HOST"".key" "$nginx_proxy_dir/certs/$vhost_alt"".key"

    test -f "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".crt" && \
    ln -sf "$PROJECT_NGINX_VIRTUAL_HOST"".crt" "$nginx_proxy_dir/certs/$vhost_alt"".crt"

    test -f "$nginx_proxy_dir/certs/$PROJECT_NGINX_VIRTUAL_HOST"".dhparam.pem" && \
    ln -sf "$PROJECT_NGINX_VIRTUAL_HOST"".dhparam.pem" "$nginx_proxy_dir/certs/$vhost_alt"".dhparam.pem"
  done

  # Tests might return an error code, even though this function is working correctly
  return 0
}
_decompose-process-generate_nginx_proxy_configs_help() {
  echo "  Generate nginx-proxy configurations"
}

# Parameters
#   $1: command
__decompose-process-ssh-command() {
  ssh $PROJECT_PRODUCTION_SERVER_USER@$PROJECT_PRODUCTION_SERVER_IP \
    "cd $PROJECT_PRODUCTION_SERVER_BASE_PATH && $1"
}

# Parameters
#   #1: branch, tag or hash to checkout
__decompose-process-update-production-repo() {
  __decompose-process-ssh-command "git fetch && git checkout $1 && git submodule update --init --recursive"
}

# Print the latest version tag in repository. Pattern: vA.B.C
__decompose-process-latest-version-tag() {
  echo $(git describe --tags --candidates=0 --match=$PROJECT_VERSION_TAG_MATCH $PROJECT_VERSION_TAG_BRANCH 2> /dev/null)
}

# Build nginx_proxy
_decompose-process_nginx_proxy_build() {
  _decompose-process-build_version_file
  echo -n "Updating nginx_proxy related images... "
  _decompose-process-nginx_proxy_docker_compose pull

  # Generate nginx-proxy configurations
  _decompose-process-generate_nginx_proxy_configs
}

# Start nginx proxy
_decompose-process_nginx_proxy_up() {
  # Restart nginx_proxy if the image changed
  echo -n "Ensuring nginx_proxy is running... "
  _decompose-process-start_nginx_proxy

  echo -n "Coping nginx_proxy configuration... "
  # Get nginx_proxy container id
  local nginx_proxy_cid=$(_decompose-process-nginx_proxy_docker_compose ps -q proxy)
  # Copy configuration files to nginx-proxy
  local nginx_proxy_dir="$(_decompose-project-root)/containers/nginx_proxy"
  test -d "$nginx_proxy_dir/vhost.d" &&
  docker cp "$nginx_proxy_dir"/vhost.d/. $nginx_proxy_cid:/etc/nginx/vhost.d
  test -d "$nginx_proxy_dir/certs" &&
  docker cp $nginx_proxy_dir/certs/. $nginx_proxy_cid:/etc/nginx/certs
  test -f "$nginx_proxy_dir/proxy.conf" &&
  docker cp $nginx_proxy_dir/proxy.conf $nginx_proxy_cid:/etc/nginx/proxy.conf
  echo "done"

  echo -n "Restarting nginx_proxy to load possible configuration changes... "
  # Restart nginx-proxy to pick up possible certification changes
  _decompose-process-restart_nginx_proxy
}

# vim:syntax=sh
